{"version":3,"file":"static/js/867.bcee4d97.chunk.js","mappings":"2RA0DA,E,QAxDkBA,GAAAA,IAAH,0xC,2DCUA,SAASC,IACpB,IAEMC,GAAWC,EAAAA,EAAAA,MACjB,GAA8BC,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAA4CJ,EAAAA,EAAAA,UAAS,MAArD,eAAOK,EAAP,KAAuBC,EAAvB,KACQC,GAAaC,EAAAA,EAAAA,YAAWC,EAAAA,GAAxBF,UAERG,EAAAA,EAAAA,YAAU,WACN,IAAMC,EAAS,yCAAG,+FACRC,EAAO,GAEJC,EAAI,EAHC,YAGEA,EAXF,GAQA,iCAIUC,EAAAA,EAAAA,IAAA,UAbpB,uCAaoB,YAAoBC,KAAKC,MAAsB,IAAhBD,KAAKE,YAJ9C,OAIJC,EAJI,OAKJC,EAAS,IAAIC,EAAAA,GAAOF,EAAMN,MAEhCA,EAAKS,KAAKF,EAAOG,SAAS,WAPhB,OAGqBT,IAHrB,uBAUdX,EAAWU,GACXR,GAAa,GAXC,4CAAH,qDAcfO,GACH,GAAE,IAoBH,OAAOR,GACH,SAAC,EAAD,WACI,gBAAKoB,IAAKC,EAAQC,IAAI,SAASC,UAAU,cAG7C,UAAC,EAAD,YACI,gBAAKA,UAAU,iBAAf,UACI,sEAEJ,gBAAKA,UAAU,UAAf,SACKzB,EAAQ0B,KAAI,SAACC,EAAQC,GAClB,OACI,gBAAiBH,UAAS,iBAAYrB,IAAmBwB,EAAQ,WAAa,IAA9E,UACI,gBAAKN,IAAG,oCAA+BK,GAAUH,IAAI,SAASK,QAAS,kBAAMxB,EAAkBuB,EAAxB,KADjEA,EAIjB,OAEL,mBAAQH,UAAU,YAAYI,QApCZ,WACtB,GAAuB,OAAnBzB,EAAJ,CAKA,IAAM0B,EAAc9B,EAAQI,IAE5B2B,EAAAA,EAAAA,IAAU,CAAED,YAAAA,IACPE,MAAK,YAAe,IAAZrB,EAAW,EAAXA,KACLL,GAAS2B,EAAAA,EAAAA,IAAWtB,IACpBd,EAAS,IACZ,IACAqC,OAAM,YAAwB,IAAXC,EAAU,EAApBC,SACNC,QAAQC,IAAIH,EACf,GAXJ,MAFGI,EAAAA,GAAAA,MAAY,0BAcnB,EAoBO,sCAKX,C,0IC7EYR,EAAS,yCAAG,WAAOD,GAAP,4FACHjB,EAAAA,EAAAA,IAAU,kBAAmBiB,EAAa,CACxDU,iBAAiB,IAFA,cACfC,EADe,yBAKdA,GALc,2CAAH,sDASTC,EAAQ,yCAAG,yGACF7B,EAAAA,EAAAA,IAAU,QAAS,CACjC2B,iBAAiB,IAFD,cACdC,EADc,yBAKbA,GALa,2CAAH,qDASRE,EAAmB,yCAAG,WAAOC,GAAP,4FACb/B,EAAAA,EAAAA,OAAA,+BAAqC+B,GAAe,CAClEJ,iBAAiB,IAFU,cACzBC,EADyB,yBAKxBA,GALwB,2CAAH,qD","sources":["components/Containers/SetAvatar/index.js","pages/setAvatar/index.js","services/user/index.js"],"sourcesContent":["import styled from \"styled-components\";\r\n\r\nconst Container = styled.div`\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    flex-direction: column;\r\n    gap: 3rem;\r\n    background: #131324;\r\n    height: 100vh;\r\n    width: 100vw;\r\n    .loader {\r\n        max-inline-size: 100%;\r\n    }\r\n    .titleContainer {\r\n        h1 {\r\n            color: #fff;\r\n        }\r\n    }\r\n    .avatars {\r\n        display: flex;\r\n        gap: 2rem;\r\n        .avatar {\r\n            border: 0.4rem solid transparent;\r\n            padding: 0.4rem;\r\n            border-radius: 5rem;\r\n            justify-content: center;\r\n            align-items: center;\r\n            transition: 0.5s ease-in-out;\r\n            cursor: pointer;\r\n            img {\r\n                height: 6rem;\r\n            }\r\n        }\r\n        .selected {\r\n            border: 0.4rem solid #4e0eff;\r\n        }\r\n    }\r\n    .submitBtn {\r\n        display: flex;\r\n        justify-content: center;\r\n        align-items: center;\r\n        background: #997af0;\r\n        color: #fff;\r\n        padding: 1rem 2rem;\r\n        border: none;\r\n        font-weight: bold;\r\n        cursor: pointer;\r\n        border-radius: 0.4rem;\r\n        font-size: 1rem;\r\n        text-transform: uppercase;\r\n        transition: 0.5s ease-in-out;\r\n        &:hover {\r\n            background: #4e0eff;\r\n        }\r\n    }\r\n`;\r\n\r\nexport default Container;\r\n","import React, { useState, useEffect, useContext } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport axios from \"@Axios\";\r\nimport { Buffer } from \"buffer\";\r\nimport loader from \"@Assets/loader.gif\";\r\nimport Container from \"@Components/Containers/SetAvatar\";\r\nimport { setAvatar } from \"@Services/user\";\r\nimport { toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport { UserContext } from \"@Context/user/userContext\";\r\nimport { UpdateUser } from \"@Context/user/userActions\";\r\n\r\nexport default function SetAvatar() {\r\n    const api = \"https://api.multiavatar.com/45678945\";\r\n    const avatarsToShow = 4;\r\n    const navigate = useNavigate();\r\n    const [avatars, setAvatars] = useState([]);\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [selectedAvatar, setSelectedAvatar] = useState(null);\r\n    const { dispatch } = useContext(UserContext);\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            const data = [];\r\n\r\n            for (let i = 0; i < avatarsToShow; i++) {\r\n                const image = await axios.get(`${api}/${Math.round(Math.random() * 1000)}`);\r\n                const buffer = new Buffer(image.data);\r\n\r\n                data.push(buffer.toString(\"base64\"));\r\n            }\r\n\r\n            setAvatars(data);\r\n            setIsLoading(false);\r\n        };\r\n\r\n        fetchData();\r\n    }, []);\r\n\r\n    const setProfilePicture = () => {\r\n        if (selectedAvatar === null) {\r\n            toast.error(\"Please select an avatar\");\r\n            return;\r\n        }\r\n\r\n        const avatarImage = avatars[selectedAvatar];\r\n\r\n        setAvatar({ avatarImage })\r\n            .then(({ data }) => {\r\n                dispatch(UpdateUser(data));\r\n                navigate(\"/\");\r\n            })\r\n            .catch(({ response: err }) => {\r\n                console.log(err);\r\n            });\r\n    };\r\n\r\n    return isLoading ? (\r\n        <Container>\r\n            <img src={loader} alt=\"loader\" className=\"loader\" />\r\n        </Container>\r\n    ) : (\r\n        <Container>\r\n            <div className=\"titleContainer\">\r\n                <h1>Pick an avatar as your profile picture</h1>\r\n            </div>\r\n            <div className=\"avatars\">\r\n                {avatars.map((avatar, index) => {\r\n                    return (\r\n                        <div key={index} className={`avatar ${selectedAvatar === index ? \"selected\" : \"\"}`}>\r\n                            <img src={`data:image/svg+xml;base64,${avatar}`} alt=\"avatar\" onClick={() => setSelectedAvatar(index)} />\r\n                        </div>\r\n                    );\r\n                })}\r\n            </div>\r\n            <button className=\"submitBtn\" onClick={setProfilePicture}>\r\n                Set as Profile Picture\r\n            </button>\r\n        </Container>\r\n    );\r\n}\r\n","import axios from \"@Axios\";\r\n\r\n// Set avatar\r\nexport const setAvatar = async (avatarImage) => {\r\n    const res = await axios.put(\"users/setAvatar\", avatarImage, {\r\n        withCredentials: true,\r\n    });\r\n\r\n    return res;\r\n};\r\n\r\n// Get all users except logged in\r\nexport const getUsers = async () => {\r\n    const res = await axios.get(\"users\", {\r\n        withCredentials: true,\r\n    });\r\n\r\n    return res;\r\n};\r\n\r\n// Delete unread message\r\nexport const deleteUnreadMessage = async (recipientId) => {\r\n    const res = await axios.delete(`users/unreadMessages/${recipientId}`, {\r\n        withCredentials: true,\r\n    })\r\n\r\n    return res;\r\n}\r\n"],"names":["styled","SetAvatar","navigate","useNavigate","useState","avatars","setAvatars","isLoading","setIsLoading","selectedAvatar","setSelectedAvatar","dispatch","useContext","UserContext","useEffect","fetchData","data","i","axios","Math","round","random","image","buffer","Buffer","push","toString","src","loader","alt","className","map","avatar","index","onClick","avatarImage","setAvatar","then","UpdateUser","catch","err","response","console","log","toast","withCredentials","res","getUsers","deleteUnreadMessage","recipientId"],"sourceRoot":""}